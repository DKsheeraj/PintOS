Name : Datta Ksheeraj
Roll no : 21CS30037

First we mention all parameters added or defined newly and then we exlain the reasons and how it functions

TASK-2 : Implementing Alarm clock

-----DATA STRUCTURES-----

int64_t sleep_end; //inside struct thread
static struct list sleep_list;  //inside timer.c file globally 
t->sleep_end = 0; //inside thread_create() function

timer_init (void)
{
  pit_configure_channel (0, 2, TIMER_FREQ);
  intr_register_ext (0x20, timer_interrupt, "8254 Timer");
  list_init (&sleep_list);
}

void
timer_sleep (int64_t ticks)/*Reimplement*/
{
  if (ticks <= 0) return;

  int64_t start = timer_ticks ();
  ASSERT (intr_get_level () == INTR_ON);
  //  while (timer_elapsed (start) < ticks)
  //    thread_yield ()
  /*
   * While calls thread_yield(), the intr will be disable, and anoter thread
   * will be shcedule to CPU, so the code is "pause" at this point until
   * CPU is schedule to this thread anytime. If the sleep time is less than
   * ticks, this progress will begin agin.
   */
  enum compare_order order = THREAD_COMPARE_SLEEP_END;
  struct thread *cur = thread_current();
  cur->sleep_end = ticks + start;
  list_insert_ordered(&sleep_list, &cur->elem, thread_compare, &order);
  enum intr_level old_level = intr_disable();
  thread_block();
  intr_set_level(old_level);
}

bool thread_compare( const struct list_elem *a, const struct list_elem *b, void *aux ) {
  struct thread *at = list_entry( a, struct thread, elem );
  struct thread *bt = list_entry( b, struct thread, elem );
  enum compare_order *order = (enum compare_order *)aux;
  if ( *order == THREAD_COMPARE_DEC )
    return at->priority > bt->priority;
  else if ( *order == THREAD_COMPARE_ASC )
    return at->priority <= bt->priority;
  else if ( *order == THREAD_COMPARE_SLEEP_END )
    return at->sleep_end <= bt->sleep_end;
  else
    return false;
}

static void
timer_interrupt (struct intr_frame *args UNUSED)
{
  ticks++;
  thread_tick();
  
  struct list_elem *e = list_begin (&sleep_list);
  while (e != list_end (&sleep_list)) { 
    struct thread *t = list_entry( e, struct thread, elem );
    if (t->sleep_end <= ticks && t->sleep_end != 0){
      t->sleep_end = 0;
      list_remove(e);
      thread_unblock(t);
      e = list_begin (&sleep_list);
    } else
      break;
  }

}

bool thread_compare( const struct list_elem *a, const struct list_elem *b, void *aux ) {
  struct thread *at = list_entry( a, struct thread, elem );
  struct thread *bt = list_entry( b, struct thread, elem );
  enum compare_order *order = (enum compare_order *)aux;
  if ( *order == THREAD_COMPARE_DEC )
    return at->priority > bt->priority;
  else if ( *order == THREAD_COMPARE_ASC )
    return at->priority <= bt->priority;
  else if ( *order == THREAD_COMPARE_SLEEP_END )
    return at->sleep_end <= bt->sleep_end;
  else
    return false;
}

-----ALGORITHM-----

Changes made : (describing algorithm along with it)

1. Introduced a variable sleep_end which indicates when should the corresponding thread should wake up
    and initialised to zero in thread_create() function in thread.c file
2. Initialised a sleep_list of type struct list which maintains the list_elem of all threads currently in sleep
3. This list gets initialised in timer_init function in timer.c which gets called during initialisation in main() in init.c
4. Removed busy wait in timer_sleep function in timer.c file, Instead has done the following
    a. We obtain the current running thread using thread_current() function
    b. We update the sleep_end variable of its struct thread to current time + necessary ticks
    c. We insert into sleep_list in sorted order
    d. We call thread_block() function which changes the state of thread and calls schedule()
    e. Points c and d should be done in non-interrupt mode as current thread should be stopped and list insertions
        should take place with locks. Here disabling and enabling interrupts function as lock
5. In timer_interrupt() function we do the following Changes
    a. As the sleep_list maintains threads in sorted order we check if any thread has to be woken up, if yes we call 
        thread_unblock() function which again pushes the thread into ready queue.
    b. We need not scan whole of the list as we maitained the list in sorted order, we break as soon as we find a thread
        with wake up time later than current time




TASK-3 : Implementing wake up thread

-----DATA STRUCTURES-----

int64_t sleep_end; //inside struct thread
static struct list sleep_list;  //inside timer.c file globally 
static struct thread *wakeup; //inside timer.c file globally 

t->sleep_end = 0; //inside thread_create() function
thread_create ("wakeup", PRI_MAX, timer_wakeup, NULL); //inside thread_start() function

timer_init (void) 
{
  pit_configure_channel (0, 2, TIMER_FREQ);
  intr_register_ext (0x20, timer_interrupt, "8254 Timer");
  list_init (&sleep_list);
}

void
timer_sleep (int64_t ticks) 
{
  if (ticks <= 0) return;
  int64_t start = timer_ticks ();

  ASSERT (intr_get_level () == INTR_ON);
  // while (timer_elapsed (start) < ticks) 
  //   thread_yield ();

  enum compare_order order = THREAD_COMPARE_SLEEP_END;
  struct thread *cur = thread_current();
  cur->sleep_end = ticks + start;
  list_insert_ordered(&sleep_list, &cur->elem, thread_compare, &order);
  enum intr_level old_level = intr_disable();
  thread_block();
  intr_set_level(old_level);
}

void timer_wakeup(){

  wakeup = thread_current();

  for(;;){
    enum intr_level old_level = intr_disable();
    thread_block();
    intr_set_level(old_level);

    struct list_elem *e = list_begin (&sleep_list);
    while (e != list_end (&sleep_list)) { //interate the sleep list to find thread to wakeup
      struct thread *t = list_entry( e, struct thread, elem );
      if (t->sleep_end <= ticks && t->sleep_end != 0){//if this thread should be wakeup
        t->sleep_end = 0;
        list_remove(e);
        thread_unblock(t);
        e = list_begin (&sleep_list);
      } else
        break;
      //this function can remove all the sleep threads need to wake up
    }
  }

}

static void
timer_interrupt (struct intr_frame *args UNUSED)
{
  ticks++;
  thread_tick ();

  struct list_elem *ee = list_begin (&sleep_list);
  
  if(ee != list_end (&sleep_list)){
    struct thread *t = list_entry( ee, struct thread, elem );
    if (t->sleep_end <= ticks && t->sleep_end != 0){
      thread_unblock(wakeup);
    }
  }

}

-----ALGORITHM-----

Changes made : (describing algorithm along with it)

1. Introduced a variable sleep_end which indicates when should the corresponding thread should wake up
    and initialised to zero in thread_create() function in thread.c file
2. Initialised a sleep_list of type struct list which maintains the list_elem of all threads currently in sleep
3. This list gets initialised in timer_init function in timer.c which gets called during initialisation in main() in init.c
4. Removed busy wait in timer_sleep function in timer.c file, Instead has done the following
    a. We obtain the current running thread using thread_current() function
    b. We update the sleep_end variable of its struct thread to current time + necessary ticks
    c. We insert into sleep_list in sorted order
    d. We call thread_block() function which changes the state of thread and calls schedule()
    e. Points c and d should be done in non-interrupt mode as current thread should be stopped and list insertions
        should take place with locks. Here disabling and enabling interrupts function as lock
5. Created a thread named "wakeup" with highest priority (PRI_MAX) along with "idle" thread which gets created in
    thread_start() function in thread.c file
6. This wakeup thread executes the timer_wakeup() function implemented in timer.c file
7. We declare a global variable of type struct thread to hold the wakeup thread
8. Implemented timer_wakeup() function as follows
    a. Intially the global variable wakeup gets hold of the current thread by thread_current() function because definitely
        the function must have been called by the wakeup thread
    b. Now the function enters an infinite for loop where it blocks itself first (because it has to be unblocked by someone)
    c. Then when unblocked by someone it checks the sleep list for any thread if it has to wake up.
    d. Does all the things required for the those threads like calling thread_unblock() for them
    e. Enters the next iteration of for loop and blocks itself by calling thread_block() and waits again for someone to unblock
9. Implemented timer_interrupt as follows
    a. Additional to what it already does it now checks if first element of sleep list is to be waken up by comparing 
        current time to its wake up time
    b. If so then it unblocks the wakeup thread by calling thread_unblock(wakeup). This is the reason we maintain it as global
        variable
    c. Else it does nothing 

Points to Note:

1. We push only list_elem into sleep lists. We use list_entry() function to obtain corresponding struct thread 
2. We implemented thread_compare() function to insert threads (list_elem's) into sleep_list in sorted order, which shall
    be passed whenever we use list_insert function


-----SYNCHRONIZATION----- (For both tasks)

1. Exclusion is followed wherever required with the use of this small template

    enum intr_level old_level = intr_disable();
    intr_set_level(old_level);

    This disables timer interrupts and functions as lock. After the work is done between those lines we restore the 
    previous state



------ADDITIONAL------

I have tried implementation of priority donation and mlfqs for sake of completion I am including the data structures 
modified for the same

I would provide the explanations for the same in the algorithm part

TASK : Priority Donation

I would try to put the whole code for modified functions or data structures but if the function body is large I would only put 
the extra changes done inside the function. That would mean the remaining body remains same

-----DATA STRUCTURES-----
struct lock {
  struct thread *holder;      
  struct semaphore semaphore; 
  int holder_priority;
  struct list_elem waitelem;    
  struct list_elem ownelem;
};

sema_down (struct semaphore *sema) {
  enum compare_order order = THREAD_COMPARE_DEC;
  while (sema->value == 0) {
    list_insert_ordered (&sema->waiters, &thread_current()->elem, thread_compare,  &order); 
    thread_block ();
  }
}

void
sema_up (struct semaphore *sema) {
  enum intr_level old_level;

  ASSERT (sema != NULL);

  old_level = intr_disable ();
  if (!list_empty (&sema->waiters)) {
    //sort the list becasue the priority donate may cause priority change
    enum compare_order order = THREAD_COMPARE_DEC;
    list_sort (&sema->waiters, thread_compare, &order);
    thread_unblock (list_entry (list_pop_front (&sema->waiters),
                                struct thread, elem));
  }
  sema->value++;
  
  thread_preemption(); //test if we should preempte current thread

  intr_set_level (old_level);
}

void 
multipleDonation ( struct lock *lock, int depth ) {

  ASSERT (lock->holder != NULL);
  ASSERT (depth >= 0);
  
  if ( depth >= 30 ) 
    return;
  
  struct thread *holder = lock->holder;
  if ( list_empty (&holder->waiting_locks) )
    return; 

  struct list_elem *e;
  for ( e = list_begin (&holder->waiting_locks); 
        e != list_end (&holder->waiting_locks); e = list_next (e) ) {
    struct lock *l = list_entry(e, struct lock, waitelem);
    if ( l->holder->priority < holder->priority ) {
      l->holder->priority = holder->priority;
      multipleDonation ( l, depth+1 );
    }
  }
}

void
set_new_as_maxPriority( struct thread *t ) {
  struct list_elem *e;
  for ( e = list_begin (&t->owning_locks); e != list_end (&t->owning_locks); 
        e = list_next (e)) {
    struct lock *l = list_entry (e, struct lock, ownelem);
    struct list_elem *te;
    for ( te = list_begin (&l->semaphore.waiters); te != list_end (&l->semaphore.waiters); te = list_next (te) ) {
      struct thread *tt = list_entry (te, struct thread, elem);
      if ( tt->priority > t->priority )
        t->priority = tt->priority;
      else
        break;
    }
  }
}

void
lock_acquire (struct lock *lock)
{
  ASSERT (lock != NULL);
  ASSERT (!intr_context ());
  ASSERT (!lock_held_by_current_thread (lock));
  if ( lock->holder != NULL ) {
    //if current thread should be block by this lock
    list_push_back(&thread_current()->waiting_locks, &lock->waitelem);
    if ( lock->holder->priority < thread_current()->priority ) {
      //if current thread have higher priority, donate it
      lock->holder->priority = thread_current()->priority;
      // test whether need multiple donate
      int depth = 0;
      multipleDonation (lock, depth);
    }
  }
  sema_down (&lock->semaphore);
  
  lock->holder = thread_current ();
  list_push_back (&lock->holder->owning_locks, &lock->ownelem);
  //save the init priority, when lock relase, it should set back
  lock->holder_priority = thread_current()->priority;
}

void
lock_release (struct lock *lock)
{
  ASSERT (lock != NULL);
  ASSERT (lock_held_by_current_thread (lock));

  lock->holder->priority = lock->holder_priority;
  list_remove (&lock->ownelem);
  set_new_as_maxPriority (lock->holder);
  lock->holder = NULL;
  sema_up (&lock->semaphore);
}

void
cond_wait (struct condition *cond, struct lock *lock)
{
  list_insert_ordered (&cond->waiters, &waiter.elem, cond_compare, NULL);
}

void
cond_signal (struct condition *cond, struct lock *lock UNUSED)
{
  if (!list_empty (&cond->waiters)) {
    list_sort (&cond->waiters, cond_compare, NULL);
    sema_up (&list_entry (list_pop_front (&cond->waiters),
                          struct semaphore_elem, elem)->semaphore);
  }
}

bool
cond_compare (const struct list_elem *a, const struct list_elem *b, void *aux UNUSED) {
  struct semaphore_elem *as = list_entry (a, struct semaphore_elem, elem);
  struct semaphore_elem *bs = list_entry (b, struct semaphore_elem, elem);
  if ( list_empty (&as->semaphore.waiters) )                    
    return true;
  else if ( list_empty (&bs->semaphore.waiters) ) {
    return false;
  } else {
    struct list_elem *tae = list_front (&as->semaphore.waiters);
    struct list_elem *tbe = list_front (&bs->semaphore.waiters);
    return list_entry (tae, struct thread, elem)->priority > list_entry(tbe, struct thread, elem)->priority;
  }
  return false;
}

struct thread {
  int priority;
  struct list waiting_locks;      
  struct list owning_locks;
}

void
thread_set_priority (int new_priority)
{
  if ( thread_mlfqs ) return;

  thread_current ()->priority = new_priority;  
  struct list_elem *e;
  struct thread *t;

  t = thread_current();
  for ( e = list_begin (&t->owning_locks); e != list_end (&t->owning_locks); 
        e = list_next (e)) {
    struct lock *l = list_entry (e, struct lock, ownelem);
    l->holder_priority = new_priority;
    t->priority = list_entry (list_front (&l->semaphore.waiters), 
                              struct thread, elem)->priority;
  }

  for (e = list_begin(&ready_list); e != list_end(&ready_list); 
       e = list_next(e)) {
    t = list_entry(e, struct thread, elem);
    if ( thread_current()->priority < t->priority ) {
      thread_yield();
      break;
    }
  }
}

int
thread_get_priority (void)
{
  return thread_current ()->priority;
}

static void
timer_interrupt (struct intr_frame *args UNUSED)
{
  thread_preemption();
}

-----ALGORITHM-----

1. We change ready queue to hold the threads in sorted order of their priorities. We add a thread_compare function to do the same to
  do the check between two threads in ascending/descending order of their priorities. The same function is also used for putting
  threads in sleep list in order of wake up times too.
2. So whenever we insert threads' struct elem into ready queue we use list_insert_ordered instead of list_push_back
3. So always threads get picked up based on their priorities. If some higher priority thread exists in ready queue then it gets
  scheduled first
4. I changed struct lock to also hold two list elements waitelem and oldelem which respectively are used by threads inside their lists of waiting
  and owning lock lists. i.e I have added two lists inside struct thread named waiting_locks and owning_locks which store the locks which the thread
  is waiting for and currently owning respectively
5. Also in the struct semaphore we have list of waiters waiting for it. We now on store the threads' elem in it in sorted order of their priorities which were 
  just stored randomly previously to ensure priority waking up
6. The same as said above is applicable for cond structures waiting lists. So we will be using list_insert_ordered instead of list_push_back
7. cond_compare() function actually does the comparsion between priorities of the threads same done in comp function used for threads pushing int ready and sleep lists
8. To implement multipleDonation() function we do the following
    a. We check upto limit of 30 the following things
    b. We extract the lock holder of the lock passed to the function as we already have it as lock->holder
    c. We iterate through the locks for which that thread is waiting for using waiting_locks list which already stores that
    d. We get the lock from elem in waiting locks using list_entry
    e. Then for each lock we check its holder if priority of that holder thread is lesser than our thread. If yes we donate the priority to that holder thread.
    f. Now we call the function recursively for this lock as we changed its priority (until depth limit 30).
9. To implement set_new_as_maxPriority() function we do the following
    a. This goes through the list of locks the current thread is owning, for each lock it check the threads which are waiting to acquire this lock and then 
        as we already store these threads in order of their priorities we take the start thread and assign its priority to our thread if is larger
    b. In this way when a thread releases lock its priority is changed to the maximum of exixting priorities which are currently trying to acquire lock
    c. In a way we are returning back the priority changed for the thread during priority donation process
10. So in lock_acquire function we also do the multipleDonation() function as new thread gets added to the list which are waiting for the lock
11. Similarly we do the set_new_as_maxPriority() function in lock_realease for reason mentioned in the function implementation
12. The thread_set_priority function does two things. As the priority got changed it checks if the priority should be donated to some other thread as we did above. Also
    as the priority changed it checks if someother thread which is having higher priority should be scheduled
13. The thread_get_priority simply returns the priority of the current thread using thread_current() function and return priority member of it


TASK : Scheduling Algorithm

-----DATA STRUCTURES-----
  fixedpoint.h file defines all the 17.14 decimal type number to int or viceversa conversions . It is completely a new file so not copy pasting all of it redundantly. We can
directly view the file completely. All implementations were already described in the pintos pdf clearly

static int load_avg; // in thread.c file
load_avg = integer_to_fixedpoint(0); // initialisation in thread_init() function in thread.c file

struct thread {
  int nice;
  int recent_cpu;
}

void
thread_foreach (thread_action_func *func, void *aux)
{
  struct list_elem *e;

  ASSERT (intr_get_level () == INTR_OFF);

  for (e = list_begin (&all_list); e != list_end (&all_list);
       e = list_next (e))
    {
      struct thread *t = list_entry (e, struct thread, allelem);
      func (t, aux);
    }
}

void
thread_set_nice (int nice)
{
  enum intr_level old_level = intr_disable();
  thread_current()->nice = nice;
  thread_recalc_priority (thread_current(), NULL);
  intr_set_level (old_level);
}

/* Returns the current thread's nice value. */
int
thread_get_nice (void)
{
  enum intr_level old_level = intr_disable();
  int nice = thread_current()->nice;
  intr_set_level(old_level);
  return nice;
}

/* Returns 100 times the system load average. */
int
thread_get_load_avg (void)
{
  enum intr_level old_level = intr_disable();
  int avg = mix_mul(100, load_avg);
  intr_set_level (old_level);
  return fixedpoint_to_integer_nearest(avg);
}

/* Returns 100 times the current thread's recent_cpu value. */
int
thread_get_recent_cpu (void)
{
  enum intr_level old_level = intr_disable();
  int recent_cpu = mix_mul (100, thread_current()->recent_cpu);
  intr_set_level (old_level);
  return fixedpoint_to_integer_nearest(recent_cpu);
}

void
thread_recalc_priority (struct thread *t, void* aux) {
  //priority = PRI_MAX - (recent_cpu / 4) - (nice * 2)
  if (t != idle_thread) {
    int pri_max_f = integer_to_fixedpoint (PRI_MAX);
    int a = fixedpoint_sub (pri_max_f, mix_div (t->recent_cpu, 4));
    int b = integer_to_fixedpoint (2 * t->nice);
    t->priority = fixedpoint_to_integer (fixedpoint_sub (a, b));

    if (t->priority < PRI_MIN)
      t->priority = PRI_MIN;
    else if (t->priority > PRI_MAX)
      t->priority = PRI_MAX;
  }
}

void 
thread_inc_recent_cpu (void) {
  if (thread_current() != idle_thread)
    thread_current()->recent_cpu = fixedpoint_add (thread_current()->recent_cpu, integer_to_fixedpoint (1));
}

void 
thread_recalc_recent_cpu (struct thread *t, void *aux) {
  if (t != idle_thread) {
    //thread_current()->recent_cpu = (2*load_avg)/(2*load_avg + 1) * recent_cpu + nice.
    int a = mix_mul (2, load_avg);
    int b = fixedpoint_add (a, integer_to_fixedpoint(1));  
    int c = fixedpoint_mul (fixedpoint_div (a, b), t->recent_cpu);
    t->recent_cpu = fixedpoint_add (c, integer_to_fixedpoint (t->nice));
  }
}

void
thread_recalc_load_avg (void) {
  //load_avg = (59/60)*load_avg + (1/60)*ready_threads.
  int a = mix_mul (59, load_avg);
  int b = mix_div (a, 60);
  
  int ready_num_f;
  if ( thread_current() != idle_thread )
    ready_num_f = integer_to_fixedpoint (list_size (&ready_list) + 1);
  else
    ready_num_f = integer_to_fixedpoint (list_size (&ready_list));

  int c = mix_div (ready_num_f, 60);
  
  load_avg = fixedpoint_add (b, c);
}

static void
timer_interrupt (struct intr_frame *args UNUSED)
{
  ticks++;
  thread_tick();
  if ( thread_mlfqs ) {
    thread_inc_recent_cpu();
    if ( ticks % TIMER_FREQ == 0 ) {
      thread_recalc_load_avg();
      thread_foreach(thread_recalc_recent_cpu, NULL);
    } 
     
    if ( ticks % THREAD_RECALC_PRIO == 0 ) {
      thread_foreach(thread_recalc_priority, NULL);
    }
  }
}

-----ALGORITHM-----

1. thread_foreach function takes in a function parameter and loops through all threads available and executes that function for that particular thread.
    using this we call this function in timer_interrupt() in timer.c to recalculate priorities and recent_cpu for each thread after every second. In our project the condition for a second
    being passes is simply that ticks must be a multiple of TIMER_FREQ
2. We do the above step only if thread_mlfqs boolean is set to true as mentioned in the pintos project document
3. There is not much algorithm involved in implementing the other functions. The implementation has been already given in the pintos project document like recalculating various things every second
    or every 4ticks as per the parameter being calculated
4. thread_get_nice simply returns the nice value of current thread using thread_current()->nice
5. thread_set_nice similarly sets the nice value to the new value passed and recalculates the its priority using thread_recalc_priority() function
6. thread_get_load_avg and thread_get_recent_cpu returns the respective values for load_avg and recent_cpu multiplied by 100
7. thread_recalc_priority() function recalculates the priority using priority = PRI_MAX - (recent_cpu / 4) - (nice * 2)
8. thread_inc_recent_cpu() function increases the recent_cpu of current thread by 1
9. thread_recalc_recent_cpu() function recalculates recent_cpu by using thread_current()->recent_cpu = (2*load_avg)/(2*load_avg + 1) * recent_cpu + nice
10. thread_recalc_load_avg() function recalculates load_avg by using load_avg = (59/60)*load_avg + (1/60)*ready_threads
11. All the above calculations are done using fixedpoint versions of respective numbers as pintos does not support floating point numbers
12. For that we use functions implemented in fixedpoint.h file

----SYNCHRONIZATION----
Whenever we need to update lists or change parameters of threads we do it between the period of disabling and enabling interrupts as mentioned already previously
This applies for all parts mentioned in readme file